class Node:
    def __init__(self, data, next=None):
        self.data, self.next = data, next


class Queue:
    def __init__(self):
        self._head = None
        self._tail = None

    def push(self, element) -> None:
        new_node = Node(element)
        if self._head is None:
            self._head = self._tail = new_node
        else:
            self._tail.next = new_node
            self._tail = new_node

    def pop(self):
        if self._head is None:
            return None
        data = self._head.data
        self._head = self._head.next
        if self._head is None:
            self._tail = None
        return data

    def peek(self):
        if self._head is None:
            return None
        return self._head.data

    def is_empty(self):
        return self._head is None


class MyStack:
    def __init__(self):
        self._queue1 = Queue()
        self._queue2 = Queue()

    def push(self, x: int) -> None:
        self._queue2.push(x)
        while not self._queue1.is_empty():
            self._queue2.push(self._queue1.pop())
        self._queue1, self._queue2 = self._queue2, self._queue1

    def pop(self) -> int:
        return self._queue1.pop()

    def top(self) -> int:
        return self._queue1.peek()

    def empty(self) -> bool:
        return self._queue2.is_empty() and self._queue1.is_empty() 
